#!/usr/bin/perl
#
# lusertools (Tools for managing user accounts and groups stored in LDAP)
#
# Copyright (c) 2021 Marko Dinic. All rights reserved.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
###############################################################################

our $VERSION = "2.1.4";

###############################################################################

our ($ABSPATH, $PREFIX, $COMMAND, $LIBDIR, $SYSCONFDIR, $LOCALSTATEDIR);

BEGIN {

    use Cwd qw(abs_path);
    $ABSPATH = abs_path($0);
    ($PREFIX, $COMMAND) = ($ABSPATH =~ /^(?:(.*)\/)?([^\/]+)$/);

###############################################################################
# DEFAULT PATHS BEGIN (change if neccessary)
###############################################################################


    $LIBDIR = $PREFIX.'/lib';
    $SYSCONFDIR = $PREFIX.'/etc';
    $LOCALSTATEDIR = '/var';


###############################################################################
# DEFAULT PATHS END (don't change anything below this line)
###############################################################################

}

###############################################################################

use strict;
use warnings;

###############################################################################

use Getopt::Long qw(:config no_ignore_case);

use Net::LDAP;
use Net::LDAPS;
use Net::LDAP::Control::Sort;
use Net::LDAP::Constant qw(LDAP_SIZELIMIT_EXCEEDED);

###############################################################################
# DEFAULTS
###############################################################################

our $config_file = "/etc/lusertools/ldap.conf";
our $secret_file = "/etc/lusertools/ldap.secret";

###############################################################################

our %config = (
    'user_objectclasses'	=> [
				    'top',
				    'account',
				    'posixAccount',
				    'shadowAccount',
				    'sambaAccount',
				    'sambaSAMAccount',
				    'qmailUser',
				    'radiusprofile'
				   ],

    'user_naming_attr'		=> 'uid',
    'group_naming_attr'		=> 'cn',
    'role_naming_attr'		=> 'cn',
    'group_member_attr'		=> 'memberUID',
    'role_member_attr'		=> 'memberUID',
);

###############################################################################

sub ldap_bind()
{
    my $binddn = $config{'bind_dn'};
    my $bindpw = $config{'bind_pw'};

    my $port = (defined($config{'ldap_port'}) && $config{'ldap_port'}=~ /^\d+$/ &&
		$config{'ldap_port'} > 0 && $config{'ldap_port'} < 65536) ? $config{'ldap_port'}:undef,

    my $ldap;

    # If SSL is requested ...
    if($config{'use_ssl'}) {
	# ... connect to LDAP master over SSL
	$ldap = Net::LDAPS->new($config{'ldap_server'},
				'ldap_port' => defined($port) ? $port:636,
				'verity' => 'none');
    # ... otherwise ...
    } else {
	# ... just connect to LDAP master
	$ldap = Net::LDAP->new($config{'ldap_server'},
			       'ldap_port' => defined($port) ? $port:389);
    }

    return undef unless defined($ldap);

    # Login to LDAP master
    my $res = $ldap->bind($binddn, 'password' => $bindpw);
    return undef unless defined($res);
    if($res->code > 0) {
	print STDERR $res->error."\n";
	$ldap->unbind;
	return undef;
    }

    return $ldap;
}

sub ldap_unbind($)
{
    $_[0]->unbind;
}

###############################################################################

sub is_user($$)
{
    my ($ldap, $username) = @_;

    my $filter = sprintf('(&(%s=%s)%s)',
			 $config{'user_naming_attr'},
			 $username,
			 $config{'user_objectclass_filter'});

    my $res = $ldap->search('base'      => $config{'users_dn'},
			    'scope'     => 'one',
			    'filter'    => $filter,
			    'attrs'     => [ $config{'user_naming_attr'} ],
			    'sizelimit' => 1);

    return undef unless defined($res);

    if($res->code > 0) {
	# We can ignore 'size limit exceeded' error, but not others
	if($res->code != LDAP_SIZELIMIT_EXCEEDED) {
	    print STDERR $res->error."\n";
	    return undef;
	}
    }

    return $res->count;
}

sub delete_user($$)
{
    my ($ldap, $username) = @_;

    # Username must be defined
    return 0 unless(defined($username) && $username ne '');

    # Format user object's DN
    my $userdn = sprintf('%s=%s,%s', $config{'user_naming_attr'}, $username, $config{'users_dn'});

    # Delete user's LDAP object
    my $res = $ldap->delete($userdn);
    if($res->code > 0) {
	print STDERR $res->error."\n";
	return 0;
    }

    print "Deleted user ".$username."\n";

    return 1;
}

sub remove_user_from_groups($$)
{
    my $ldap = shift;
    my $username = shift;

    return 0 unless(defined($config{'group_member_attr'}) &&
		    $config{'group_member_attr'} ne '');

    my $filter = sprintf('(%s=%s)',
			 $config{'group_member_attr'},
			 $username);

    my $res = $ldap->search('base'      => $config{'groups_dn'},
			    'scope'     => 'one',
			    'filter'    => $filter,
			    'attrs'     => [ $config{'group_naming_attr'} ]);

    return 0 unless defined($res);

    if($res->code > 0) {
	print STDERR $res->error."\n";
	return 0;
    }
    
    # Remove user from every group in the list
    foreach my $group ($res->entries) {
	# Get group name
	my $groupname = $group->get_value($config{'group_naming_attr'});
	next unless(defined($groupname) && $groupname ne '');
	# Get group object's DN
	my $groupdn = $group->dn();
	next unless(defined($groupdn) && $groupdn ne '');
	# Remove username from the group LDAP object's member attribute
	my $res = $ldap->modify($groupdn, 'delete' => { $config{'group_member_attr'} => $username  });
	next unless defined($res);
	if($res->code > 0) {
	    print STDERR $res->error."\n";
	    return 0;
	}
    
	print "Removed user from additional group ".$groupname."\n";
    }
    
    return 1;
}

sub unassign_user_roles($$)
{
    my $ldap = shift;
    my $username = shift;

    return 0 unless(defined($config{'role_member_attr'}) &&
		    $config{'role_member_attr'} ne '');

    my $filter = sprintf('(%s=%s)',
			 $config{'role_member_attr'},
			 $username);

    my $res = $ldap->search('base'      => $config{'roles_dn'},
			    'scope'     => 'one',
			    'filter'    => $filter,
			    'attrs'     => [ $config{'role_naming_attr'} ]);

    return 0 unless defined($res);

    if($res->code > 0) {
	print STDERR $res->error."\n";
	return 0;
    }
    
    # Unassign every user role in the list
    foreach my $role ($res->entries) {
	# Get role name
	my $rolename = $role->get_value($config{'role_naming_attr'});
	next unless(defined($rolename) && $rolename ne '');
	# Get role object's DN
	my $roledn = $role->dn();
	next unless(defined($roledn) && $roledn ne '');
	# Remove username from the role LDAP object's member attribute
	my $res = $ldap->modify($roledn, 'delete' => { $config{'role_member_attr'} => $username  });
	next unless defined($res);
	if($res->code > 0) {
	    print STDERR $res->error."\n";
	    return 0;
	}
    
	print "Unassigned role ".$rolename."\n";
    }
    
    return 1;
}

###############################################################################

sub get_config($$)
{
    my ($configfile, $secretfile) = @_;
    local *CONF;

    # Make sure configuration file exists
    unless(-f $configfile) {
	print STDERR "Configuration file is missing.\n";
	return 0;
    }

    # Open config file
    unless(open(CONF, $configfile)) {
	print STDERR "Couldn't open configuration file ".$configfile."\n";
	return 0;
    }

    # Load configuration
    while(<CONF>) {
	chop;
	$_ =~ s/(#.+)$//g;				 # Strip comments
	$_ =~ s/^\s+//g;				 # Strip leading spaces
	$_ =~ s/\s+$//g;				 # Strip trailing spaces
	my ($opt, $arg) = ($_ =~ /^(\S+)(?:\s+(.*))?$/); # Split config line string

	next unless(defined($opt) && $opt ne '');

	# If configuration option's argument is missing,
	# that option will be completely ignored, even
	# if it has a default setting.
	unless(defined($arg) && $arg ne '') {
	    delete $config{$opt} if exists $config{$opt};
	# If configuration option is prefixed with '!',
	# that option will be completely ignored, even
	# if it has a default setting.
	} elsif($opt =~ /^\!(.*)$/) {
	    delete $config{$1} if($1 ne '' && exists $config{$1});
	} elsif($opt eq 'use_ssl') {
	    $config{$opt} = ($arg =~ /^on|yes|true|1$/i) ? 1:0;
	} elsif($opt =~ /^(?:user|group|role)\_objectclasses$/) {
	    $config{$opt} = [ (split(/,/, $arg)) ];
	} else {
	    $config{$opt} = $arg;
	}
    }

    # Close config file
    close(CONF);

    # Make sure loaded configuration didn't mess up object classes
    unless(defined($config{'user_objectclasses'}) && scalar(@{$config{'user_objectclasses'}}) > 0) {
	print STDERR "At least one user object class must be defined.\n";
	return 0;
    }

    # If we were invoked by root ...
    if($> == 0 && $< == 0) {
	# ... make sure secret file exists
	unless(-f $secretfile) {
	    print STDERR "Secret file is missing.\n";
	    return 0;
	}
	# ... open LDAP bind secret file
	unless(open(CONF, $secretfile)) {
	    print STDERR "Couldn't open secret file ".$secretfile."\n";
	    return 0;
	}
	# ... get LDAP bind secret
	my $secret = <CONF>;
	chomp $secret;
	# ... close LDAP bind secret file
	close(CONF);
	# ... use root DN as bind DN
	$config{'bind_dn'} = $config{'root_dn'};
	# ... add LDAP secret to the configuration
	$config{'bind_pw'} = $secret;
    }

    unless(defined($config{'ldap_server'}) && $config{'ldap_server'} ne '') {
	print STDERR "LDAP server not configured properly.\n";
	return 0;
    }

    unless(defined($config{'bind_dn'}) && $config{'bind_dn'} ne '' &&
	   defined($config{'bind_pw'}) && $config{'bind_pw'} ne '') {
	print STDERR "Invalid LDAP credentials.\n";
	return 0;
    }

    unless(defined($config{'users_dn'}) && $config{'users_dn'} ne '') {
	print STDERR "Users base DN not configured properly.\n";
	return 0;
    }

    unless(defined($config{'groups_dn'}) && $config{'groups_dn'} ne '') {
	print STDERR "Groups base DN not configured properly.\n";
	return 0;
    }

    unless(defined($config{'roles_dn'}) && $config{'roles_dn'} ne '') {
	print STDERR "Roles base DN not configured properly.\n";
	return 0;
    }

    # Generate object class filter for search operations
    $config{'user_objectclass_filter'} = '(&(objectClass='.join(')(objectClass=', @{$config{'user_objectclasses'}}).'))';
    
    return 1;
}

###############################################################################

sub usage()
{
print <<EOF 
Usage: $COMMAND [OPTIONS] <username>

OPTIONS:

 -C, --config <config file>
 -S, --secret <secret file>

 --confirmed

 -h, --help
 -v, --version

EOF
;

    exit(1);
}

sub version()
{
    print "lusertools (version ".$VERSION.")\n\n";
    usage();
}

###############################################################################
# M A I N
###############################################################################

my ($username, $yes);
my ($res, $help, $ver);

# Get command line arguments, if any
$res = GetOptions('help|h|?'	=> \$help,
		  'version|v'	=> \$ver,
		  'config|C=s'	=> \$config_file,
		  'secret|S=s'	=> \$secret_file,
		  'confirmed'	=> \$yes);

# Show help if requested
usage() if(!$res || $help);
# Show version, if requested
version() if $ver;

# Username is mandatory, obviously
if(scalar(@ARGV) == 1) {
    $username = shift @ARGV;
# If command line arguments are wrong ...
} else {
    # ... show help
    usage();
}

# Make sure we were invoked by root
unless($> == 0 && $< == 0) {
    print STDERR "Only root can use this command.\n";
    exit(2);
}

# Checks and double-checks: username must be defined at this point
unless(defined($username) && $username ne '') {
    print STDERR "Username is missing or invalid.\n";
    exit(3);
}

# Deleting an user must be confirmed
# to avoid accidental deletion ...
unless($yes) {
    print STDERR "User deletion must be explicitly confirmed.\n";
    exit(4);
}

# Load config file
get_config($config_file, $secret_file)
  or exit(5);

$res = 0;

# Connect and bind to LDAP server
my $ldap = ldap_bind();
unless(defined($ldap)) {
    print STDERR "Failed to connect to LDAP master.\n";
    exit(6);
}

# User must exist
unless(is_user($ldap, $username)) {
    print STDERR "User ".$username." doesn't exist.\n";
    exit(7);
}

# Remove user from additional groups, if any
# and unassign user's roles, if any
if(remove_user_from_groups($ldap, $username) &&
   unassign_user_roles($ldap, $username)) {
    # Delete user object
    $res = delete_user($ldap, $username);
}

# Unbind from server
ldap_unbind($ldap);

print "User not deleted.\n" unless $res;

exit($res ? 0:255);

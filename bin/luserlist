#!/usr/bin/perl
#
# lusertools (Tools for managing user accounts and groups stored in LDAP)
#
# Copyright (c) 2019 Marko Dinic. All rights reserved.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
###############################################################################

our $VERSION = "2.0.0";

###############################################################################

our ($ABSPATH, $PREFIX, $COMMAND, $LIBDIR, $SYSCONFDIR, $LOCALSTATEDIR);

BEGIN {

    use Cwd qw(abs_path);
    $ABSPATH = abs_path($0);
    ($PREFIX, $COMMAND) = ($ABSPATH =~ /^(?:(.*)\/)?([^\/]+)$/);

###############################################################################
# DEFAULT PATHS BEGIN (change if neccessary)
###############################################################################


    $LIBDIR = $PREFIX.'/lib';
    $SYSCONFDIR = $PREFIX.'/etc';
    $LOCALSTATEDIR = '/var';


###############################################################################
# DEFAULT PATHS END (don't change anything below this line)
###############################################################################

}

########################################################################################

use strict;
use warnings;

########################################################################################

use Getopt::Long qw(:config no_ignore_case);

use Net::LDAP;
use Net::LDAPS;
use Net::LDAP::Control::Sort;
use Net::LDAP::Constant qw(LDAP_SIZELIMIT_EXCEEDED);

########################################################################################
# DEFAULTS
########################################################################################

our $config_file = "/etc/lusertools/ldap.conf";
our $secret_file = "/etc/lusertools/ldap.secret";

########################################################################################

our %config = (

   'user_objectclasses'		=> [
				    'top',
				    'account',
				    'posixAccount',
				    'shadowAccount',
				    'sambaAccount',
				    'sambaSAMAccount',
				    'qmailUser',
				    'radiusprofile'
				   ],

    'group_objectclasses'	=> [ 
				    'top',
				    'posixGroup',
				    'sambaDomain'
				   ],

    'user_naming_attr'		=> 'uid',
    'group_naming_attr'		=> 'cn',
    'uid_attr'			=> 'uidNumber',
    'gid_attr'			=> 'gidNumber',
    'gecos_attr'		=> 'gecos',
    'homedir_attr'		=> 'homeDirectory',
    'shell_attr'		=> 'loginShell',
    'group_member_attr'		=> 'memberUid'
);

########################################################################################

sub ldap_bind()
{
    my $binddn = $config{'bind_dn'};
    my $bindpw = $config{'bind_pw'};

    my $port = (defined($config{'ldap_port'}) && $config{'ldap_port'}=~ /^\d+$/ &&
		$config{'ldap_port'} > 0 && $config{'ldap_port'} < 65536) ? $config{'ldap_port'}:undef,

    my $ldap;

    # If SSL is requested ...
    if($config{'use_ssl'}) {
	# ... connect to LDAP master over SSL
	$ldap = Net::LDAPS->new($config{'ldap_server'},
				'ldap_port' => defined($port) ? $port:636,
				'verity' => 'none');
    # ... otherwise ...
    } else {
	# ... just connect to LDAP master
	$ldap = Net::LDAP->new($config{'ldap_server'},
			       'ldap_port' => defined($port) ? $port:389);
    }

    return undef unless defined($ldap);

    # Login to LDAP master
    my $res = $ldap->bind($binddn, 'password' => $bindpw);
    return undef unless defined($res);
    if($res->code > 0) {
	print STDERR $res->error;
	$ldap->unbind;
	return undef;
    }

    return $ldap;
}

sub ldap_unbind($)
{
    $_[0]->unbind;
}

########################################################################################

sub get_group($$)
{
    my ($ldap, $gid) = @_;

    my $res = $ldap->search('base'      => $config{'groups_dn'},
			    'scope'     => 'one',
			    'filter'    => sprintf('(%s=%s)', $config{'gid_attr'}, $gid),
			    'attrs'     => [ $config{'group_naming_attr'} ],
			    'sizelimit' => 1);

    return undef unless defined($res);
    
    if($res->code > 0) {
	# We can ignore 'size limit exceeded' error, but not others
	if($res->code != LDAP_SIZELIMIT_EXCEEDED) {
	    print STDERR $res->error."\n";
	    return undef;
	}
    }

    # Get the group object
    my ($group) = $res->entries;
    return undef unless defined($group);
    # Get the group name
    return $group->get_value($config{'group_naming_attr'});
}   

sub get_additional_groups($$)
{
    my ($ldap, $username) = @_;

    my $res = $ldap->search('base'   => $config{'groups_dn'},
			    'scope'  => 'one',
			    'filter' => sprintf('(%s=%s)', $config{'group_member_attr'}, $username),
			    'attrs'  => [ $config{'group_naming_attr'} ]);

    return () unless defined($res);
    
    if($res->code > 0) {
	# We can ignore 'size limit exceeded' error, but not others
	if($res->code != LDAP_SIZELIMIT_EXCEEDED) {
	    print STDERR $res->error."\n";
	    return ();
	}
    }

    my @groups = ();

    # Collect results
    foreach my $group ($res->entries) {
	# Get group name
	my $groupname = $group->get_value($config{'group_naming_attr'});
	next unless(defined($groupname) && $groupname ne '');
	# Add it to the list
	push @groups, $groupname;
    }

    return @groups;
}

sub list_users($)
{
    my $ldap = shift;

    # This is a Server Side Sorting (SSS) control.
    # We want to do a search with results sorted by
    # GIDs in ascending order
    my $sort = Net::LDAP::Control::Sort->new('order' => $config{'uid_attr'});

    # Get the list of users
    my $res = $ldap->search('base'    => $config{'users_dn'},
			    'scope'   => 'one',
			    'filter'  => $config{'user_objectclass_filter'},
			    'control' => [ $sort ]);

    return undef unless defined($res);

    if($res->code > 0) {
	# We can ignore 'size limit exceeded' error, but not others
	if($res->code != LDAP_SIZELIMIT_EXCEEDED) {
	    print STDERR $res->error."\n";
	    return undef;
	}
    }

    # Print header
    printf("%-20s %-20s %-8s %-16s %-24s %-10s %s\n%s\n",
	   'Username',
	   'Gecos',
	   'UID',
	   'Group (GID)',
	   'Home Dir',
	   'Shell',
	   'Additional Groups',
	   '-'x120);

    # Print users' metadata
    foreach my $user ($res->entries) {
	my $username = $user->get_value($config{'user_naming_attr'});
	my $gecos = $user->get_value($config{'gecos_attr'});
	my $uid = $user->get_value($config{'uid_attr'});
	my $gid = $user->get_value($config{'gid_attr'});
	my $home = $user->get_value($config{'homedir_attr'});
	my $shell = $user->get_value($config{'shell_attr'});

	# Get user's primary group name by GID
	my $groupname = get_group($ldap, $gid);

	if(defined($groupname) && $groupname ne '') {
	    # Append GID to the group name
	    $groupname .= (defined($gid) && $gid ne '') ? ' ('.$gid.')':'';
	} else {
	    $groupname = $gid;
	}

	# Get additional groups this user belongs to
	my @additional_groups = get_additional_groups($ldap, $username);

	printf("%-20s %-20s %-8d %-16s %-24s %-10s %s\n",
		defined($username) ? $username:'',
		defined($gecos) ? $gecos:'',
		defined($uid) ? $uid:'',
		defined($groupname) && $groupname ne '' ? $groupname:'',
		defined($home) ? $home:'',
		defined($shell) ? $shell:'',
		(scalar(@additional_groups) > 0) ? join(',', @additional_groups):'');

    }
}

########################################################################################

sub get_config($$)
{
    my ($configfile, $secretfile) = @_;
    local *CONF;

    # Make sure configuration file exists
    unless(-f $configfile) {
	print STDERR "Configuration file is missing.\n";
	return 0;
    }

    # Make sure secret file exists
    unless(-f $secretfile) {
	print STDERR "Secret file is missing.\n";
	return 0;
    }

    # Open config file
    unless(open(CONF, $configfile)) {
	print STDERR "Couldn't open configuration file ".$configfile."\n";
	return 0;
    }

    # Load configuration
    while(<CONF>) {
	chop;
	$_ =~ s/(#.+)$//g;				 # Strip comments
	$_ =~ s/^\s+//g;				 # Strip leading spaces
	$_ =~ s/\s+$//g;				 # Strip trailing spaces
	my ($opt, $arg) = ($_ =~ /^(\S+)(?:\s+(.*))?$/); # Split config line string

	next unless(defined($opt) && $opt ne '');

	# If configuration option's argument is missing,
	# that option will be completely ignored, even
	# if it has a default setting.
	unless(defined($arg) && $arg ne '') {
	    delete $config{$opt} if exists $config{$opt};
	# If configuration option is prefixed with '!',
	# that option will be completely ignored, even
	# if it has a default setting.
	} elsif($opt =~ /^\!(.*)$/) {
	    delete $config{$1} if($1 ne '' && exists $config{$1});
	} elsif($opt eq 'use_ssl') {
	    $config{$opt} = ($arg =~ /^on|yes|true|1$/i) ? 1:0;
	} elsif($opt =~ /^(?:user|group)\_objectclasses$/) {
	    $config{$opt} = [ (split(/,/, $arg)) ];
	} else {
	    $config{$opt} = $arg;
	}
    }

    # Close config file
    close(CONF);

    # Make sure loaded configuration didn't mess up object classes
    unless(defined($config{'user_objectclasses'}) && scalar(@{$config{'user_objectclasses'}}) > 0) {
	print STDERR "At least one user object class must be defined.\n";
	return 0;
    }

    # Open LDAP bind secret file
    unless(open(CONF, $secretfile)) {
	print STDERR "Couldn't open secret file ".$secretfile."\n";
	return 0;
    }

    # Get LDAP bind secret
    my $secret = <CONF>;
    chomp $secret;
    # Add LDAP secret to the configuration
    $config{'bind_pw'} = $secret;
    # Close LDAP bind secret file
    close(CONF);

    # Generate object class filter for search operations
    $config{'user_objectclass_filter'} = '(&(objectClass='.join(')(objectClass=', @{$config{'user_objectclasses'}}).'))';

    return 1;
}

########################################################################################

sub usage()
{
print <<EOF 
Usage: $COMMAND [OPTIONS]

OPTIONS:

 -C, --config <config file>
 -S, --secret <secret file>

 -h, --help
 -v, --version

EOF
;

    exit(1);
}

sub version()
{
    print "lusertools (version ".$VERSION.")\n\n";
    usage();
}

########################################################################################
#                                       M A I N
########################################################################################

my ($res, $help, $ver);

# Get command line arguments, if any
$res = GetOptions('help|h'		=> \$help,
		  'version|v'		=> \$ver,
		  'config|C=s'		=> \$config_file,
		  'secret|S=s'		=> \$secret_file);

# Show help if requested
usage() if(!$res || $help);
# Show version, if requested
version() if $ver;

# If command line arguments are wrong, show help
usage() if(scalar(@ARGV) > 0);

# Load config file
get_config($config_file, $secret_file)
  or exit(4);

$res = 0;

# Connect and bind to LDAP server
my $ldap = ldap_bind();
unless(defined($ldap)) {
    print STDERR "Failed to connect to LDAP master.\n";
    exit(5);
}

# List user objects
list_users($ldap);

# Unbind from server
ldap_unbind($ldap);

exit($res ? 0:255);

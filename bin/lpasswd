#!/usr/bin/perl
#   
# lusertools (Tools for managing user accounts and groups stored in LDAP)
#   
# Copyright (c) 2019 Marko Dinic. All rights reserved.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
###############################################################################

our $VERSION = "2.0.0";

###############################################################################

our ($ABSPATH, $PREFIX, $COMMAND, $LIBDIR, $SYSCONFDIR, $LOCALSTATEDIR);

BEGIN {
    
    use Cwd qw(abs_path);
    $ABSPATH = abs_path($0);
    ($PREFIX, $COMMAND) = ($ABSPATH =~ /^(?:(.*)\/)?([^\/]+)$/);

###############################################################################
# DEFAULT PATHS BEGIN (change if neccessary)
###############################################################################


    $LIBDIR = $PREFIX.'/lib';
    $SYSCONFDIR = $PREFIX.'/etc';
    $LOCALSTATEDIR = '/var';


###############################################################################
# DEFAULT PATHS END (don't change anything below this line)
###############################################################################

}

########################################################################################

use strict;
use warnings;

########################################################################################

use Getopt::Long qw(:config no_ignore_case);

use Term::ReadKey;
use MIME::Base64;
use Crypt::SmbHash;

use Net::LDAP;
use Net::LDAPS;

########################################################################################
# DEFAULTS
########################################################################################

our $config_file = "/etc/lusertools/ldap.conf";
our $secret_file = "/etc/lusertools/ldap.secret";

########################################################################################

our %config = (
    'user_naming_attr'		=> 'uid',
    'unix_password_attr'	=> 'userPassword',
    'samba_ntpassword_attr'	=> 'sambaNTPassword',
    'samba_lmpassword_attr'	=> 'sambaLMPassword',
    'ntpassword_attr'		=> 'ntPassword',
    'lmpassword_attr'		=> 'lmPassword',
    'unix_last_change_attr'	=> 'shadowLastChange',
    'samba_last_change_attr'	=> 'pwdLastSet'
);

########################################################################################

sub unix_password($)
{
    my $password = shift;
    my $salt = '';
    local *U;

    # Generate random salt for crypt()
    if(open(U, '/dev/urandom')) {
	# Read random 256 bytes
	read(U, my $rnd, 256);
	close(U);
	# Format salt for SHA256 encryption scheme
	$salt = '$5$'.encode_base64($rnd);
    }
    # Encrypt password with generated salt
    my $hash = crypt($password, $salt);
    # Verify generated encrypted password
    my $check = crypt($password, $hash);

    return ($check eq $hash) ? $hash:undef;
}

########################################################################################

sub is_strong($)
{
    my $password = shift;

    return 0 unless defined($password);

    # Get the minimum required number of uppercase characters
    my $minupper = $config{'password_minimum_uppercase'};
    $minupper = 0 unless defined($minupper);

    # Get the minimum required number of lowercase characters
    my $minlower = $config{'password_minimum_lowercase'};
    $minlower = 0 unless defined($minlower);

    # Get the minimum required number of numeric characters
    my $minnum = $config{'password_minimum_numeric'};
    $minnum = 0 unless defined($minnum);

    # Get the minimum required number of non-alphanumeric characters
    my $minna = $config{'password_minimum_nonalphanum'};
    $minna = 0 unless defined($minna);

    # Minimum required length cannot be less than the sum
    # of all configured requirements, if minimum password
    # length is enforced
    my $minreq = $minupper + $minlower + $minnum + $minna;

    # Get the minimum required password length
    my $minlen = $config{'password_minimum_length'};
    # If minimum password length is defined, minimum password
    # length requirement will be enforced
    if(defined($minlen)) {
	# If configured minimum is less than total length
	# of other requirements, we will resize it
	$minlen = $minreq if $minlen < $minreq;
    # Otherwise ....
    } else {
	# ... minimum password length will not be enforced
	$minlen = 0;
    }

    # If password minimum length is enforced
    # and password is shorther than that, fail.
    if($minlen > 0 && length($password) < $minlen) {
	print STDERR "Password must be at least ".$minlen." characters long.\n";
	return 0;
    }

    # If minimum number of uppercase characters is enforced ...
    if($minupper > 0) {
	my $num = () = ($password =~ /[A-Z]/g);
	# ... and password does not conform, fail
	unless($num >= $minupper) {
	    print STDERR "Password must contain at least ".$minupper." uppercase characters.\n";
	    return 0;
	}
    }

    # If minimum number of lowercase characters is enforced ...
    if($minlower > 0) {
	my $num = () = ($password =~ /[a-z]/g);
	# ... and password does not conform, fail
	unless($num >= $minlower) {
	    print STDERR "Password must contain at least ".$minlower." lowercase characters.\n";
	    return 0;
	}
    }

    # If minimum number of numeric characters is enforced ...
    if($minnum > 0) {
	my $num = () = ($password =~ /[0-9]/g);
	# ... and password does not conform, fail
	unless($num >= $minnum) {
	    print STDERR "Password must contain at least ".$minnum." numeric characters.\n";
	    return 0;
	}
    }

    # If minimum number of non-alphanumeric characters is enforced ...
    if($minna > 0) {
	my $num = () = ($password =~ /[^a-zA-Z0-9]/g);
	# ... and password does not conform, fail
	unless($num >= $minna) {
	    print STDERR "Password must contain at least ".$minna." non-alphanumeric characters.\n";
	    return 0;
	}
    }

    # Password conforms to the defined policy
    return 1;
}

########################################################################################

sub ldap_bind($$)
{
    my ($username, $password) = @_;
    my ($binddn, $bindpw);

    # If current user is root, use admin bind credentials
    if($username eq 'root') {
	$binddn = $config{'bind_dn'};
	$bindpw = $config{'bindpw'};
    # If current user is an ordinary user, bind as that user
    } else {
	$binddn = sprintf('%s=%s,%s', $config{'user_naming_attr'}, $username, $config{'users_dn'});
	$bindpw = $password;
    }

    my $port = (defined($config{'ldap_port'}) && $config{'ldap_port'}=~ /^\d+$/ &&
		$config{'ldap_port'} > 0 && $config{'ldap_port'} < 65536) ? $config{'ldap_port'}:undef,

    my $ldap;

    # If SSL is requested ...
    if($config{'use_ssl'}) {
	# ... connect to LDAP master over SSL
	$ldap = Net::LDAPS->new($config{'ldap_server'},
				'ldap_port' => defined($port) ? $port:636,
				'verity' => 'none');
    # ... otherwise ...
    } else {
	# ... just connect to LDAP master
	$ldap = Net::LDAP->new($config{'ldap_server'},
			       'ldap_port' => defined($port) ? $port:389);
    }

    return undef unless defined($ldap);

    # Login to LDAP master
    my $res = $ldap->bind($binddn, 'password' => $bindpw);
    return undef unless defined($res);
    if($res->code > 0) {
	print STDERR $res->error;
	$ldap->unbind;
	return undef;
    }

    return $ldap;
}

sub ldap_unbind($)
{
    $_[0]->unbind;
}

########################################################################################

sub modify_passwords($$$)
{
    my ($ldap, $username, $password) = @_;

    # Don't waste time ...
    return 0 unless(defined($username) && $username ne '' &&
		    defined($password) && $password ne '');

    # Format target user object's DN
    my $userdn = sprintf("%s=%s,%s", $config{'user_naming_attr'}, $username, $config{'users_dn'});

    my %attrs = ();

    # Generate Unix crypt() password hash
    my $unix_password = unix_password($password);
    # Generate Windows NT/LM password hash
    my ($lm_password, $nt_password) = ntlmgen($password);
    # If UNIX password attribute is defined ...
    if(defined($config{'unix_password_attr'}) && $config{'unix_password_attr'} ne '') {
	# ... add generated password hash to user object's attributes
	$attrs{$config{'unix_password_attr'}} = '{crypt}'.$unix_password;
    }
    # If new samba schema's NT password attribute is defined ...
    if(defined($config{'samba_ntpassword_attr'}) && $config{'samba_ntpassword_attr'} ne '') {
	# ... add generated NT hash to user object's attributes
	$attrs{$config{'samba_ntpassword_attr'}} = $nt_password;
    }
    # If new samba schema's LM password attribute is defined ...
    if(defined($config{'samba_lmpassword_attr'}) && $config{'samba_lmpassword_attr'} ne '') {
	# ... add generated LM hash to user object's attributes
	$attrs{$config{'samba_lmpassword_attr'}} = $lm_password;
    }
    # If old samba schema's NT password attribute is defined ...
    if(defined($config{'ntpassword_attr'}) && $config{'ntpassword_attr'} ne '') {
	# ... add generated NT hash to user object's attributes
	$attrs{$config{'ntpassword_attr'}} = $nt_password;
    }
    # If old samba schema's LM password attribute is defined ...
    if(defined($config{'lmpassword_attr'}) && $config{'lmpassword_attr'} ne '') {
	# ... add generated LM hash to user object's attributes
	$attrs{$config{'lmpassword_attr'}} = $lm_password;
    }

    # Current timestamp in days since epoch
    my $last_change = int(time() / 86400);
    # If password last change attributes are configured ...
    foreach my $attrkey ('unix_last_change_attr','samba_last_change_attr') {
	my $attrname = $config{$attrkey};
	if(defined($attrname) && $attrname ne '') {
	    # ... we will be updating them as well
	    $attrs{$attrname} = $last_change;
	}
    }

    # Modify LDAP object's attributes
    my $res = $ldap->modify($userdn, 'replace' => \%attrs);
    if($res->code > 0) {
	print STDERR $res->error."\n";
	return 0;
    }

    return 1;
}

########################################################################################

sub get_config($$;$)
{
    my ($configfile, $secretfile, $username) = @_;
    local *CONF;

    # Make sure configuration file exists
    unless(-f $configfile) {
	print STDERR "Configuration file is missing.\n";
	return 0;
    }

    # Open config file
    unless(open(CONF, $configfile)) {
	print STDERR "Couldn't open configuration file ".$configfile."\n";
	return 0;
    }

    # Load configuration
    while(<CONF>) {
	chop;
	$_ =~ s/(#.+)$//g;				 # Strip comments
	$_ =~ s/^\s+//g;				 # Strip leading spaces
	$_ =~ s/\s+$//g;				 # Strip trailing spaces
	my ($opt, $arg) = ($_ =~ /^(\S+)(?:\s+(.*))?$/); # Split config line string
    
	next unless(defined($opt) && $opt ne '');

	# If configuration option's argument is missing,
	# that option will be completely ignored, even
	# if it has a default setting.
	unless(defined($arg) && $arg ne '') {
	    delete $config{$opt} if exists $config{$opt};
	# If configuration option is prefixed with '!',
	# that option will be completely ignored, even
	# if it has a default setting.
	} elsif($opt =~ /^\!(.*)$/) {
	    delete $config{$1} if($1 ne '' && exists $config{$1});
	} elsif($opt eq 'use_ssl') {
	    $config{$opt} = ($arg =~ /^on|yes|true|1$/i) ? 1:0;
	} else {
	    $config{$opt} = $arg;
	}
    }

    # Close config file
    close(CONF);

    # If current user is root ...
    if($username eq 'root') {
	# Make sure secret file exists
	unless(-f $secretfile) {
	    print STDERR "Secret file is missing.\n";
	    return 0;
	}
	# Open LDAP bind secret file
	unless(open(CONF, $secretfile)) {
	    print STDERR "Couldn't open secret file ".$secretfile."\n";
	    return 0;
	}
	# Get LDAP bind secret
	my $secret = <CONF>;
	chomp $secret;
	# Add LDAP secret to the configuration
	$config{'bindpw'} = $secret;
	# Close LDAP bind secret file
	close(CONF);
    }

    return 1;
}

########################################################################################

sub usage()
{
print <<EOF
Usage: $COMMAND [OPTIONS] [username]

OPTIONS (root only):

 -C, --config <config file>
 -S, --secret <secret file>

OPTIONS:

 -p, --password <current password>
 -n, --newpassword <new password>

 -h, --help
 -v, --version

EOF
;

    exit(1);
}

sub version()
{
    print "lusertools (version ".$VERSION.")\n\n";
    usage();
}

########################################################################################
#                                       M A I N
########################################################################################

my ($current_username, $current_password, $new_password, $confirm_password);
my ($configfile, $secretfile);
my ($res, $help, $ver);

# Get current user
$current_username = getpwuid($>);
die "Cannot determine the current user.\n" unless(defined($current_username) &&
						  $current_username ne '');

# Get command line arguments, if any
$res = GetOptions('help|h'		=> \$help,
		  'version|v'		=> \$ver,
		  'config|C=s'		=> \$configfile,
		  'secret|S=s'		=> \$secretfile,
		  'password|p=s'	=> \$current_password,
		  'newpassword|n=s'	=> \$new_password);

# Show help if requested
usage() if(!$res || $help);
# Show version, if requested
version() if $ver;

if(defined($configfile) && $configfile ne '') {
    if($> != 0 || $< != 0) {
	print STDERR "Only root can use alternate config file.\n";
	exit(2);
    }
    $config_file = $configfile;
}

if(defined($secretfile) && $secretfile ne '') {
    if($> != 0 || $< != 0) {
	print STDERR "Only root can use alternate secret file.\n";
	exit(4);
    }
    $secret_file = $secretfile;
}

my ($target_username, $whose);

# If command was invoked without username ...
if(scalar(@ARGV) < 1) {
    # ... we will be changing our own password(s)
    unless($> == 0 || $< == 0 || $current_username eq 'root') {
	$target_username = $current_username;
	$whose = "your";
    } else {
	print STDERR "root cannot change it's own password this way.\n";
	exit(6);
    }
# If command was invoked with username ...
} elsif(scalar(@ARGV) == 1) {
    # ... we will be changing other user's password(s),
    # but that is something only root can do
    if($> == 0 && $< == 0 && $current_username eq 'root') {
	$target_username = shift @ARGV;
	$whose = $target_username."'s";
    } else {
	print STDERR "Only root can change other users' passwords.\n";
	exit(7);
    }
# If command line arguments are wrong ...
} else {
    # ... show help
    usage();
}

# Checks and double-checks: target username must be defined at this point
unless(defined($target_username) && $target_username ne '') {
    print STDERR "Username is missing or invalid.\n";
    exit(8);
}

# If password was not given on the command line, enter interactive mode and ask for it
my $interactive = ((($> == 0 && $< == 0 && $current_username eq 'root') ||
		    (defined($current_password) && $current_password ne '')) &&
		   defined($new_password) && $new_password ne '') ? 0:1;

# Load config file
get_config($config_file, $secret_file, $current_username)
  or exit(9);

# If we are in interactive mode, we will be asking user to enter passwords
if($interactive) {
    # We will make 3 attempts at most
    for(my $i = 0; $i < 3; $i++) {
	# Ask for current password - it will be used
	# directly to bind to LDAP server
	unless($current_username eq 'root') {
	    print "Enter ".$whose." current office password:";
	    ReadMode('noecho');
	    $current_password = ReadLine(0);
	    ReadMode('restore');
	    chomp $current_password;
	    print "\n";

	    last unless(defined($current_password) && $current_password ne '');
	}

	# Ask for new password
	print "Enter ".$whose." new office password:";
	ReadMode('noecho');
	$new_password = ReadLine(0);
	ReadMode('restore');
	chomp $new_password;
	print "\n";

	last unless(defined($new_password) && $new_password ne '');

	# Password must be strong, unless we are root,
	# in which case we can set whatever we want
	if(is_strong($new_password) || ($> == 0 && $< == 0 && $current_username eq 'root')) {

	    # Ask for new password confirmation
	    print "Retype ".$whose." new office password:";
	    ReadMode('noecho');
	    $confirm_password = ReadLine(0);
	    ReadMode('restore');
	    chomp $confirm_password;
	    print "\n";

	    last if (defined($confirm_password) && $confirm_password eq $new_password);

	    print "Passwords do not match.\n";

	}

	undef $confirm_password;
	undef $current_password;
	undef $new_password;
    }

}

$res = 0;

# If passwords are defined ...
if(defined($new_password) && $new_password ne '' &&
   ((defined($current_password) && $current_password ne '') ||
    ($> == 0 && $< == 0 && $current_username eq 'root'))) {
    # ... bind to LDAP master ...
    my $ldap = ldap_bind($current_username, $current_password);
    unless(defined($ldap)) {
	print STDERR "Failed to connect to LDAP master.\n";
	exit(10);
    }
    # ... modify password(s) in LDAP ...
    $res = modify_passwords($ldap, $target_username, $new_password);
    # ... unbind from server
    ldap_unbind($ldap);

}

print $res ? "Password changed.\n":"Password not changed.\n";

exit($res ? 0:255);

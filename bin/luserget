#!/usr/bin/perl
#
# lusertools (Tools for managing user accounts and groups stored in LDAP)
#
# Copyright (c) 2019 Marko Dinic. All rights reserved.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
###############################################################################

our $VERSION = "2.1.0";

###############################################################################

our ($ABSPATH, $PREFIX, $COMMAND, $LIBDIR, $SYSCONFDIR, $LOCALSTATEDIR);

BEGIN {

    use Cwd qw(abs_path);
    $ABSPATH = abs_path($0);
    ($PREFIX, $COMMAND) = ($ABSPATH =~ /^(?:(.*)\/)?([^\/]+)$/);

###############################################################################
# DEFAULT PATHS BEGIN (change if neccessary)
###############################################################################


    $LIBDIR = $PREFIX.'/lib';
    $SYSCONFDIR = $PREFIX.'/etc';
    $LOCALSTATEDIR = '/var';


###############################################################################
# DEFAULT PATHS END (don't change anything below this line)
###############################################################################

}

########################################################################################

use strict;
use warnings;

########################################################################################

use Getopt::Long qw(:config no_ignore_case);

use Net::LDAP;
use Net::LDAPS;
use Net::LDAP::Control::Sort;
use Net::LDAP::Constant qw(LDAP_SIZELIMIT_EXCEEDED);

########################################################################################
# DEFAULTS
########################################################################################

our $config_file = "/etc/lusertools/ldap.conf";
our $secret_file = "/etc/lusertools/ldap.secret";

########################################################################################

our %config = (
    'user_naming_attr'		=> 'uid',
    'group_naming_attr'		=> 'cn',
    'role_naming_attr'		=> 'cn',
    'uid_attr'			=> 'uidNumber',
    'gid_attr'			=> 'gidNumber',
    'rid_attr'			=> 'rid',
    'samba_sid_attr'		=> 'sambaSID',
    'homedir_attr'		=> 'homeDirectory',
    'shell_attr'		=> 'loginShell',
    'mail_attr'			=> 'mail',
    'mailhost_attr'		=> 'mailHost',
    'mailbox_attr'		=> 'mailMessageStore',
    'mailquota_attr'		=> 'mailQuotaSize',
    'gecos_attr'		=> 'gecos',
    'roles_attr'		=> 'radiusGroupName',
    'group_member_attr'		=> 'memberUid',
    'role_member_attr'		=> 'memberUid'
);

########################################################################################

sub shorten_bytes($)
{
    my $value = shift;

    return '' unless(defined($value) && $value =~ /^\d+$/);

    my $short;
    my $unit;

    my @units = ('', 'K', 'M', 'G', 'T', 'P', 'E');

    while($value >= 1 && scalar(@units) > 1) {
	# Keep current value
	$short = $value;
	# Keep the unit
	$unit = shift @units;
	# Try the next order of magnitude
	$value /= 1024;
    }

    return sprintf('%.1f%s', $short, $unit);
}

########################################################################################

sub ldap_bind()
{
    my $binddn = $config{'bind_dn'};
    my $bindpw = $config{'bind_pw'};

    my $port = (defined($config{'ldap_port'}) && $config{'ldap_port'}=~ /^\d+$/ &&
		$config{'ldap_port'} > 0 && $config{'ldap_port'} < 65536) ? $config{'ldap_port'}:undef,

    my $ldap;

    # If SSL is requested ...
    if($config{'use_ssl'}) {
	# ... connect to LDAP master over SSL
	$ldap = Net::LDAPS->new($config{'ldap_server'},
				'ldap_port' => defined($port) ? $port:636,
				'verity' => 'none');
    # ... otherwise ...
    } else {
	# ... just connect to LDAP master
	$ldap = Net::LDAP->new($config{'ldap_server'},
			       'ldap_port' => defined($port) ? $port:389);
    }

    return undef unless defined($ldap);

    # Login to LDAP master
    my $res = $ldap->bind($binddn, 'password' => $bindpw);
    return undef unless defined($res);
    if($res->code > 0) {
	print STDERR $res->error."\n";
	$ldap->unbind;
	return undef;
    }

    return $ldap;
}

sub ldap_unbind($)
{
    $_[0]->unbind;
}

########################################################################################

sub get_group($$)
{
    my ($ldap, $gid) = @_;

    # Search for specified group by GID
    my $res = $ldap->search('base'      => $config{'groups_dn'},
			    'scope'     => 'one',
			    'filter'    => sprintf('(%s=%s)', $config{'gid_attr'}, $gid),
			    'attrs'     => [ $config{'group_naming_attr'} ],
			    'sizelimit' => 1);

    return undef unless defined($res);
    
    if($res->code > 0) {
	# We can ignore 'size limit exceeded' error, but not others
	if($res->code != LDAP_SIZELIMIT_EXCEEDED) {
	    print STDERR $res->error."\n";
	    return undef;
	}
    }

    # Get group's LDAP object
    my ($group) = $res->entries;
    return undef unless defined($group);
    # Get the group's name
    return $group->get_value($config{'group_naming_attr'});
}   

sub get_additional_groups($$)
{
    my ($ldap, $username) = @_;

    # Search for groups this user is a member of
    my $res = $ldap->search('base'   => $config{'groups_dn'},
			    'scope'  => 'one',
			    'filter' => sprintf('(%s=%s)', $config{'group_member_attr'}, $username),
			    'attrs'  => [ $config{'group_naming_attr'}, $config{'gid_attr'} ]);

    return () unless defined($res);
    
    if($res->code > 0) {
	# We can ignore 'size limit exceeded' error, but not others
	if($res->code != LDAP_SIZELIMIT_EXCEEDED) {
	    print STDERR $res->error."\n";
	    return ();
	}
    }

    my %groups = ();

    # Collect results
    foreach my $group ($res->entries) {
	# Get the group's name
	my $groupname = $group->get_value($config{'group_naming_attr'});
	next unless(defined($groupname) && $groupname ne '');
	# Get GID
	my $gid = $group->get_value($config{'gid_attr'});
	next unless(defined($gid) && $gid ne '');
	# Add both to the list
	$groups{$groupname} = $gid;
    }

    return %groups;
}

sub get_roles($$)
{
    my ($ldap, $username) = @_;

    # Search for roles assigned to this user
    my $res = $ldap->search('base'   => $config{'roles_dn'},
			    'scope'  => 'one',
			    'filter' => sprintf('(%s=%s)', $config{'role_member_attr'}, $username),
			    'attrs'  => [ $config{'role_naming_attr'}]);

    return () unless defined($res);
    
    if($res->code > 0) {
	# We can ignore 'size limit exceeded' error, but not others
	if($res->code != LDAP_SIZELIMIT_EXCEEDED) {
	    print STDERR $res->error."\n";
	    return ();
	}
    }

    my @roles = ();

    # Collect results
    foreach my $role ($res->entries) {
	# Get the role's name
	my $rolename = $role->get_value($config{'role_naming_attr'});
	next unless(defined($rolename) && $rolename ne '');
	# Add rolename to the list
	push @roles, $rolename;
    }

    return @roles;
}

sub user_info($$)
{
    my ($ldap, $username) = @_;

    # Search for specified user by name
    my $res = $ldap->search('base'      => $config{'users_dn'},
			    'scope'     => 'one',
			    'filter'    => sprintf('(%s=%s)', $config{'user_naming_attr'}, $username),
			    'sizelimit' => 1);

    return undef unless defined($res);

    if($res->code > 0) {
	# We can ignore 'size limit exceeded' error, but not others
	if($res->code != LDAP_SIZELIMIT_EXCEEDED) {
	    print STDERR $res->error."\n";
	    return undef;
	}
    }

    # Get user's LDAP object
    my ($user) = $res->entries;
    # Pick up user account metadata
    my $gecos = $user->get_value($config{'gecos_attr'});
    my $uid = $user->get_value($config{'uid_attr'});
    my $rid = $user->get_value($config{'rid_attr'});
    my $gid = $user->get_value($config{'gid_attr'});
    my $sid = $user->get_value($config{'samba_sid_attr'});
    my $home = $user->get_value($config{'homedir_attr'});
    my $shell = $user->get_value($config{'shell_attr'});
    my $email = $user->get_value($config{'mail_attr'});
    my $mailhost = $user->get_value($config{'mailhost_attr'});
    my $mailbox = $user->get_value($config{'mailbox_attr'});
    my $mailquota = $user->get_value($config{'mailquota_attr'});

    # Get user's primary group name by GID
    my $groupname = get_group($ldap, $gid);

    if(defined($groupname) && $groupname ne '') {
	# Append GID to the group name
	$groupname .= (defined($gid) && $gid ne '') ? ' ('.$gid.')':'';
    } else {
	$groupname = $gid;
    }

    my @additional_groups = ();

    # Get additional groups this user belongs to
    my %groups = get_additional_groups($ldap, $username);
    while(my ($gr, $gid) = each %groups) {
	# Append GID to the groupname
	push @additional_groups, $gr.' ('.$gid.')';
    }

    my @roles = get_roles($ldap, $username);

    my $group_list = '';
    my $role_list = '';
    my $line = '';

    while(defined(my $member = shift(@additional_groups))) {
	$line .= $member.(scalar(@additional_groups) ? ', ':'');
	if(40 - length($line) < 5) {
	    $group_list .= $line.(scalar(@additional_groups) ? "\n".(' 'x21):'');
	    $line = '';
	}
    }

    $group_list .= $line;
    $line = '';

    while(defined(my $role = shift(@roles))) {
	$line .= $role.(scalar(@roles) ? ', ':'');
	if(40 - length($line) < 5) {
	    $role_list .= $line.(scalar(@roles) ? "\n".(' 'x21):'');
	    $line = '';
	}
    }

    $role_list .= $line;

    printf("%-20s %s\n", 'Username:', defined($username) ? $username:'');
    printf("%-20s %s\n", 'Full name:', defined($gecos) ? $gecos:'');
    printf("%-20s %s\n", 'E-mail:', defined($email) ? $email:'');
    printf("%-20s %s\n", 'UID:', defined($uid) ? $uid:'');
    printf("%-20s %s\n", 'Primary group:', defined($groupname) && $groupname ne '' ? $groupname:'');
    printf("%-20s %s\n", 'Additional groups:', $group_list);
    printf("%-20s %s\n", 'Roles:', $role_list);
    printf("%-20s %s\n", 'Windows RID:', defined($rid) ? $rid:'');
    printf("%-20s %s\n", 'Windows SID:', defined($sid) ? $sid:'');
    printf("%-20s %s\n", 'Home directory:', defined($home) ? $home:'');
    printf("%-20s %s\n", 'Shell:', defined($shell) ? $shell:'');
    printf("%-20s %s\n", 'Mail host:', defined($mailhost) ? $mailhost:'');
    printf("%-20s %s\n", 'Mailbox:', defined($mailbox) ? $mailbox:'');
    printf("%-20s %s\n", 'Mail quota:', defined($mailquota) ? shorten_bytes($mailquota):'');
}

sub is_user($$)
{
    my ($ldap, $username) = @_;

    # Search for specified user by name
    my $res = $ldap->search('base'      => $config{'users_dn'},
			    'scope'     => 'one',
			    'filter'    => sprintf('(%s=%s)', $config{'user_naming_attr'}, $username),
			    'attrs'     => [ $config{'user_naming_attr'} ],
			    'sizelimit' => 1);

    return undef unless defined($res);

    if($res->code > 0) {
	# We can ignore 'size limit exceeded' error, but not others
	if($res->code != LDAP_SIZELIMIT_EXCEEDED) {
	    print STDERR $res->error."\n";
	    return undef;
	}
    }

    # Any number of results greater than zero
    # means that the user exists
    return $res->count;
}

########################################################################################

sub get_config($$)
{
    my ($configfile, $secretfile) = @_;
    local *CONF;

    # Make sure configuration file exists
    unless(-f $configfile) {
	print STDERR "Configuration file is missing.\n";
	return 0;
    }

    # Open config file
    unless(open(CONF, $configfile)) {
	print STDERR "Couldn't open configuration file ".$configfile."\n";
	return 0;
    }

    # Load configuration
    while(<CONF>) {
	chop;
	$_ =~ s/(#.+)$//g;				 # Strip comments
	$_ =~ s/^\s+//g;				 # Strip leading spaces
	$_ =~ s/\s+$//g;				 # Strip trailing spaces
	my ($opt, $arg) = ($_ =~ /^(\S+)(?:\s+(.*))?$/); # Split config line string

	next unless(defined($opt) && $opt ne '');

	# If configuration option's argument is missing,
	# that option will be completely ignored, even
	# if it has a default setting.
	unless(defined($arg) && $arg ne '') {
	    delete $config{$opt} if exists $config{$opt};
	# If configuration option is prefixed with '!',
	# that option will be completely ignored, even
	# if it has a default setting.
	} elsif($opt =~ /^\!(.*)$/) {
	    delete $config{$1} if($1 ne '' && exists $config{$1});
	} elsif($opt eq 'use_ssl') {
	    $config{$opt} = ($arg =~ /^on|yes|true|1$/i) ? 1:0;
	} else {
	    $config{$opt} = $arg;
	}
    }

    # Close config file
    close(CONF);

    # If we were invoked by root ...
    if($> == 0 && $< == 0) {
	# ... make sure secret file exists
	unless(-f $secretfile) {
	    print STDERR "Secret file is missing.\n";
	    return 0;
	}
	# ... open LDAP bind secret file
	unless(open(CONF, $secretfile)) {
	    print STDERR "Couldn't open secret file ".$secretfile."\n";
	    return 0;
	}
	# ... get LDAP bind secret
	my $secret = <CONF>;
	chomp $secret;
	# ... finally, close LDAP bind secret file
	close(CONF);
	# ... use root DN as bind DN
	$config{'bind_dn'} = $config{'root_dn'};
	# ... add LDAP secret to the configuration
	$config{'bind_pw'} = $secret;
    }

    unless(defined($config{'ldap_server'}) && $config{'ldap_server'} ne '') {
	print STDERR "LDAP server not configured properly.\n";
	return 0;
    }

    unless(defined($config{'bind_dn'}) && $config{'bind_dn'} ne '' &&
	   defined($config{'bind_pw'}) && $config{'bind_pw'} ne '') {
	print STDERR "Invalid LDAP credentials.\n";
	return 0;
    }

    unless(defined($config{'users_dn'}) && $config{'users_dn'} ne '') {
	print STDERR "Users base DN not configured properly.\n";
	return 0;
    }

    unless(defined($config{'groups_dn'}) && $config{'groups_dn'} ne '') {
	print STDERR "Groups base DN not configured properly.\n";
	return 0;
    }

    return 1;
}

########################################################################################

sub usage()
{
print <<EOF 
Usage: $COMMAND [OPTIONS] <username>

OPTIONS:

 -C, --config <config file>
 -S, --secret <secret file>

 -h, --help
 -v, --version

EOF
;

    exit(1);
}

sub version()
{
    print "lusertools (version ".$VERSION.")\n\n";
    usage();
}

########################################################################################
#                                       M A I N
########################################################################################

my $username;
my ($res, $help, $ver);

# Get command line arguments, if any
$res = GetOptions('help|h'		=> \$help,
		  'version|v'		=> \$ver,
		  'config|C=s'		=> \$config_file,
		  'secret|S=s'		=> \$secret_file);

# Show help if requested
usage() if(!$res || $help);
# Show version, if requested
version() if $ver;

# Username is mandatory, obviously
if(scalar(@ARGV) == 1) {
    $username = shift @ARGV;
# If command line arguments are wrong ...
} else {
    # ... show help
    usage();
}

# If command line arguments are wrong, show help
usage() if(scalar(@ARGV) > 0);

# Load config file
get_config($config_file, $secret_file)
  or exit(2);

$res = 0;

# Connect and bind to LDAP server
my $ldap = ldap_bind();
unless(defined($ldap)) {
    print STDERR "Failed to connect to LDAP master.\n";
    exit(3);
}

# User must exist
unless(is_user($ldap, $username)) {
    print STDERR "User ".$username." doesn't exist.\n";
    exit(4);
}

# Display user info
user_info($ldap, $username);

# Unbind from server
ldap_unbind($ldap);

exit($res ? 0:255);
